// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

package source_resource

import (
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/types"
)

// GetSourceResourceSchema returns the schema definition for the source resource.
func GetSourceResourceSchema() schema.Schema {
	return schema.Schema{
		Description:         "Manages a SailPoint Identity Security Cloud (ISC) source.",
		MarkdownDescription: "The `sailpoint_source` resource allows you to create, read, update, and delete sources in SailPoint ISC. Sources represent external applications, databases, and directory management systems that maintain their own sets of users.",
		Attributes: map[string]schema.Attribute{
			// Core identifiers
			"id": schema.StringAttribute{
				Computed:            true,
				Description:         "The unique identifier for the source.",
				MarkdownDescription: "The unique identifier for the source. This is automatically generated by SailPoint.",
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
				},
			},
			"name": schema.StringAttribute{
				Required:            true,
				Description:         "The name of the source.",
				MarkdownDescription: "The display name for the source. Must be unique within the organization.",
			},

			// Required attributes
			"description": schema.StringAttribute{
				Required:            true,
				Description:         "The description of the source.",
				MarkdownDescription: "A human-readable description of the source and its purpose.",
			},
			"owner": schema.SingleNestedAttribute{
				Required:            true,
				Description:         "Reference to identity object who owns the source.",
				MarkdownDescription: "Reference to identity object who owns the source.",
				Attributes: map[string]schema.Attribute{
					"type": schema.StringAttribute{
						Required:            true,
						Description:         "Type of object being referenced. Must be 'IDENTITY'.",
						MarkdownDescription: "Type of object being referenced. Must be 'IDENTITY'.",
					},
					"id": schema.StringAttribute{
						Required:            true,
						Description:         "Owner identity's ID.",
						MarkdownDescription: "Owner identity's ID.",
					},
					"name": schema.StringAttribute{
						Optional:            true,
						Computed:            true,
						Description:         "Owner identity's human-readable display name.",
						MarkdownDescription: "Owner identity's human-readable display name.",
					},
				},
			},
			"connector": schema.StringAttribute{
				Required:            true,
				Description:         "The connector type identifier.",
				MarkdownDescription: "The connector type identifier (e.g., 'active-directory', 'workday', 'delimited-file').",
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.RequiresReplace(),
				},
			},

			// Core attributes
			"type": schema.StringAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "The type of system being managed.",
				MarkdownDescription: "Specifies the type of system being managed (e.g., 'Active Directory', 'Workday', 'DelimitedFile').",
			},
			"connector_class": schema.StringAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "The fully qualified Java class name that implements the connector interface.",
				MarkdownDescription: "Fully qualified name of the Java class that implements the connector interface.",
			},
			"connection_type": schema.StringAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "The type of connection (direct or file).",
				MarkdownDescription: "Type of connection used by the source. Typically 'direct' for real-time connections or 'file' for batch processing.",
			},
			"authoritative": schema.BoolAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "Whether the source is authoritative.",
				MarkdownDescription: "When true, indicates that the source is referenced by an identity profile and is authoritative for identity data.",
			},
			"cluster": schema.SingleNestedAttribute{
				Optional:            true,
				Description:         "Reference to the source's associated cluster.",
				MarkdownDescription: "Reference to the source's associated cluster.",
				Attributes: map[string]schema.Attribute{
					"type": schema.StringAttribute{
						Required:            true,
						Description:         "Type of object being referenced. Must be 'CLUSTER'.",
						MarkdownDescription: "Type of object being referenced. Must be 'CLUSTER'.",
					},
					"id": schema.StringAttribute{
						Required:            true,
						Description:         "Cluster ID.",
						MarkdownDescription: "Cluster ID.",
					},
					"name": schema.StringAttribute{
						Required:            true,
						Description:         "Cluster's human-readable display name.",
						MarkdownDescription: "Cluster's human-readable display name.",
					},
				},
			},

			// Configuration attributes
			"connector_attributes": schema.StringAttribute{
				Optional:            true,
				Computed:            true,
				Sensitive:           true,
				Description:         "Connector-specific configuration as JSON string.",
				MarkdownDescription: "Connector-specific configuration. Must be a JSON string containing the configuration parameters required by the specific connector type. This field is marked as sensitive as it may contain credentials.",
			},
			"delete_threshold": schema.Int64Attribute{
				Optional:            true,
				Computed:            true,
				Description:         "The account deletion threshold (0-100).",
				MarkdownDescription: "Number from 0 to 100 that specifies when to skip the delete phase during aggregation.",
			},
			"features": schema.ListAttribute{
				ElementType:         types.StringType,
				Optional:            true,
				Computed:            true,
				Description:         "List of enabled features for the source.",
				MarkdownDescription: "Optional features that can be supported by a source (e.g., 'PROVISIONING', 'NO_PERMISSIONS_PROVISIONING', 'GROUPS_HAVE_MEMBERS').",
			},

			// Management attributes
			"management_workgroup": schema.SingleNestedAttribute{
				Optional:            true,
				Description:         "Reference to the management workgroup for this source.",
				MarkdownDescription: "Management workgroup reference that controls who can manage this source.",
				Attributes: map[string]schema.Attribute{
					"type": schema.StringAttribute{
						Required:            true,
						Description:         "Type of object being referenced (typically 'GOVERNANCE_GROUP').",
						MarkdownDescription: "Type of object being referenced (typically 'GOVERNANCE_GROUP').",
					},
					"id": schema.StringAttribute{
						Required:            true,
						Description:         "Management workgroup's unique identifier.",
						MarkdownDescription: "Management workgroup's unique identifier.",
					},
					"name": schema.StringAttribute{
						Required:            true,
						Description:         "Management workgroup's human-readable display name.",
						MarkdownDescription: "Management workgroup's human-readable display name.",
					},
				},
			},

			// Correlation & Rules
			"account_correlation_config": schema.SingleNestedAttribute{
				Optional:            true,
				Description:         "Reference to the account correlation configuration for this source.",
				MarkdownDescription: "Account correlation configuration reference that defines how accounts are correlated.",
				Attributes: map[string]schema.Attribute{
					"type": schema.StringAttribute{
						Required:            true,
						Description:         "Type of object being referenced (typically 'ACCOUNT_CORRELATION_CONFIG').",
						MarkdownDescription: "Type of object being referenced (typically 'ACCOUNT_CORRELATION_CONFIG').",
					},
					"id": schema.StringAttribute{
						Required:            true,
						Description:         "Account correlation config's unique identifier.",
						MarkdownDescription: "Account correlation config's unique identifier.",
					},
					"name": schema.StringAttribute{
						Required:            true,
						Description:         "Account correlation config's human-readable display name.",
						MarkdownDescription: "Account correlation config's human-readable display name.",
					},
				},
			},
			"account_correlation_rule": schema.SingleNestedAttribute{
				Optional:            true,
				Description:         "Reference to the account correlation rule for this source.",
				MarkdownDescription: "Account correlation rule reference that defines custom correlation logic.",
				Attributes: map[string]schema.Attribute{
					"type": schema.StringAttribute{
						Required:            true,
						Description:         "Type of object being referenced (typically 'RULE').",
						MarkdownDescription: "Type of object being referenced (typically 'RULE').",
					},
					"id": schema.StringAttribute{
						Required:            true,
						Description:         "Account correlation rule's unique identifier.",
						MarkdownDescription: "Account correlation rule's unique identifier.",
					},
					"name": schema.StringAttribute{
						Required:            true,
						Description:         "Account correlation rule's human-readable display name.",
						MarkdownDescription: "Account correlation rule's human-readable display name.",
					},
				},
			},
			"manager_correlation_rule": schema.SingleNestedAttribute{
				Optional:            true,
				Description:         "Reference to the manager correlation rule for this source.",
				MarkdownDescription: "Manager correlation rule reference that defines how manager relationships are established.",
				Attributes: map[string]schema.Attribute{
					"type": schema.StringAttribute{
						Required:            true,
						Description:         "Type of object being referenced (typically 'RULE').",
						MarkdownDescription: "Type of object being referenced (typically 'RULE').",
					},
					"id": schema.StringAttribute{
						Required:            true,
						Description:         "Manager correlation rule's unique identifier.",
						MarkdownDescription: "Manager correlation rule's unique identifier.",
					},
					"name": schema.StringAttribute{
						Required:            true,
						Description:         "Manager correlation rule's human-readable display name.",
						MarkdownDescription: "Manager correlation rule's human-readable display name.",
					},
				},
			},
			"manager_correlation_mapping": schema.SingleNestedAttribute{
				Optional:            true,
				Description:         "Manager correlation mapping configuration for this source.",
				MarkdownDescription: "Manager correlation mapping that defines how manager relationships are mapped between account and identity attributes.",
				Attributes: map[string]schema.Attribute{
					"account_attribute_name": schema.StringAttribute{
						Required:            true,
						Description:         "Name of the account attribute that contains manager information.",
						MarkdownDescription: "Name of the account attribute that contains manager information.",
					},
					"identity_attribute_name": schema.StringAttribute{
						Required:            true,
						Description:         "Name of the identity attribute to map the manager information to.",
						MarkdownDescription: "Name of the identity attribute to map the manager information to.",
					},
				},
			},

			// Provisioning
			"before_provisioning_rule": schema.SingleNestedAttribute{
				Optional:            true,
				Description:         "Reference to the before provisioning rule for this source.",
				MarkdownDescription: "Before provisioning rule reference that executes custom logic before account provisioning.",
				Attributes: map[string]schema.Attribute{
					"type": schema.StringAttribute{
						Required:            true,
						Description:         "Type of object being referenced (typically 'RULE').",
						MarkdownDescription: "Type of object being referenced (typically 'RULE').",
					},
					"id": schema.StringAttribute{
						Required:            true,
						Description:         "Before provisioning rule's unique identifier.",
						MarkdownDescription: "Before provisioning rule's unique identifier.",
					},
					"name": schema.StringAttribute{
						Required:            true,
						Description:         "Before provisioning rule's human-readable display name.",
						MarkdownDescription: "Before provisioning rule's human-readable display name.",
					},
				},
			},
			"password_policies": schema.ListNestedAttribute{
				Optional:            true,
				Description:         "List of password policy references.",
				MarkdownDescription: "List of password policy references associated with this source.",
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"type": schema.StringAttribute{
							Required:            true,
							Description:         "The type of the password policy reference (typically 'PASSWORD_POLICY').",
							MarkdownDescription: "Type of the password policy reference.",
						},
						"id": schema.StringAttribute{
							Required:            true,
							Description:         "The ID of the password policy.",
							MarkdownDescription: "Unique identifier of the password policy.",
						},
						"name": schema.StringAttribute{
							Required:            true,
							Description:         "The name of the password policy.",
							MarkdownDescription: "Display name of the password policy.",
						},
					},
				},
			},

			// Status & Metadata (Computed)
			"healthy": schema.BoolAttribute{
				Computed:            true,
				Description:         "Whether the source is healthy.",
				MarkdownDescription: "Boolean flag indicating whether the source is currently healthy and operational.",
			},
			"status": schema.StringAttribute{
				Computed:            true,
				Description:         "The current status of the source.",
				MarkdownDescription: "Status identifier that gives specific information about why a source is or isn't healthy.",
			},
			"since": schema.StringAttribute{
				Computed:            true,
				Description:         "Timestamp showing when a source health check was last performed.",
				MarkdownDescription: "Timestamp that shows when a source health check was last performed.",
			},
			"created": schema.StringAttribute{
				Computed:            true,
				Description:         "The timestamp when the source was created.",
				MarkdownDescription: "Date-time when the source was created, in RFC3339 format.",
			},
			"modified": schema.StringAttribute{
				Computed:            true,
				Description:         "The timestamp when the source was last modified.",
				MarkdownDescription: "Date-time when the source was last modified, in RFC3339 format.",
			},
			"connector_id": schema.StringAttribute{
				Computed:            true,
				Description:         "The connector ID.",
				MarkdownDescription: "Connector implementation ID used internally by SailPoint.",
			},
			"connector_name": schema.StringAttribute{
				Computed:            true,
				Description:         "The name of the connector.",
				MarkdownDescription: "Name of the connector that was chosen during source creation.",
			},
			"schemas": schema.ListNestedAttribute{
				Computed:            true,
				Description:         "List of associated schemas.",
				MarkdownDescription: "List of references to schema objects associated with this source.",
				NestedObject: schema.NestedAttributeObject{
					Attributes: map[string]schema.Attribute{
						"type": schema.StringAttribute{
							Computed:            true,
							Description:         "The type of the schema reference (typically 'CONNECTOR_SCHEMA').",
							MarkdownDescription: "Type of the schema reference.",
						},
						"id": schema.StringAttribute{
							Computed:            true,
							Description:         "The ID of the schema.",
							MarkdownDescription: "Unique identifier of the schema.",
						},
						"name": schema.StringAttribute{
							Computed:            true,
							Description:         "The name of the schema.",
							MarkdownDescription: "Display name of the schema.",
						},
					},
				},
			},

			// Special Parameters
			"credential_provider_enabled": schema.BoolAttribute{
				Optional:            true,
				Computed:            true,
				Description:         "Whether credential provider is enabled for the source.",
				MarkdownDescription: "If true, enables a credential provider for the source. When enabled, the source can use credential provider(s) to fetch credentials.",
			},
			"category": schema.StringAttribute{
				Computed:            true,
				Description:         "The source category.",
				MarkdownDescription: "Source category (e.g., null, CredentialProvider).",
			},
		},
	}
}
