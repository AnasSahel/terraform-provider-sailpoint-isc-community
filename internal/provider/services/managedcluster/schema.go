package managedcluster

import (
	"github.com/hashicorp/terraform-plugin-framework/attr"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/mapdefault"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/mapplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/planmodifier"
	"github.com/hashicorp/terraform-plugin-framework/resource/schema/stringplanmodifier"
	"github.com/hashicorp/terraform-plugin-framework/types"
)

// GetManagedClusterResourceSchema returns the schema definition for the managed cluster resource
func GetManagedClusterResourceSchema() schema.Schema {
	return schema.Schema{
		Description:         "Manages a SailPoint Identity Security Cloud (ISC) managed cluster.",
		MarkdownDescription: "The `sailpoint_managed_cluster` resource allows you to create, read, update, and delete managed clusters in SailPoint ISC.",
		Attributes: map[string]schema.Attribute{
			"id": schema.StringAttribute{
				Computed:            true,
				Description:         "The unique identifier for the managed cluster.",
				MarkdownDescription: "The unique identifier for the managed cluster. This is automatically generated by SailPoint.",
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
				},
			},
			"name": schema.StringAttribute{
				Required:            true,
				Description:         "The name of the managed cluster.",
				MarkdownDescription: "The display name for the managed cluster. Must be unique within the organization.",
			},
			"description": schema.StringAttribute{
				Required:            true,
				Description:         "The description of the managed cluster.",
				MarkdownDescription: "A human-readable description of the managed cluster and its purpose.",
			},
			"type": schema.StringAttribute{
				Required:            true,
				Description:         "The type of the managed cluster (e.g., 'idn').",
				MarkdownDescription: "The type of managed cluster. Common values include `idn` for Identity Now clusters.",
			},
			"configuration": schema.MapAttribute{
				ElementType: types.StringType,
				Optional:    true,
				Computed:    true,
				Default:     mapdefault.StaticValue(types.MapValueMust(types.StringType, map[string]attr.Value{})),
				PlanModifiers: []planmodifier.Map{
					mapplanmodifier.UseStateForUnknown(),
				},
				Description:         "Configuration settings for the managed cluster as key-value pairs.",
				MarkdownDescription: "Configuration settings for the managed cluster. Keys should use snake_case format (e.g., `gmt_offset`) and will be automatically converted to camelCase for the SailPoint API.",
			},
			// Computed attributes (read-only)
			"pod": schema.StringAttribute{
				Computed:            true,
				Description:         "The pod where the managed cluster is deployed.",
				MarkdownDescription: "The SailPoint pod (data center) where the managed cluster is deployed.",
			},
			"org": schema.StringAttribute{
				Computed:            true,
				Description:         "The organization that owns the managed cluster.",
				MarkdownDescription: "The SailPoint organization identifier that owns this managed cluster.",
			},
			"client_type": schema.StringAttribute{
				Computed:            true,
				Description:         "The type of client used by the managed cluster.",
				MarkdownDescription: "The client type used by the managed cluster (e.g., CCG - Cloud Connection Gateway).",
				PlanModifiers: []planmodifier.String{
					stringplanmodifier.UseStateForUnknown(),
				},
			},
			"ccg_version": schema.StringAttribute{
				Computed:            true,
				Description:         "The version of the Cloud Connection Gateway (CCG).",
				MarkdownDescription: "The version of the Cloud Connection Gateway software running on the managed cluster.",
			},
			"pinned_config": schema.BoolAttribute{
				Computed:            true,
				Description:         "Indicates whether the cluster configuration is pinned.",
				MarkdownDescription: "Boolean flag indicating whether the cluster configuration is pinned and cannot be automatically updated.",
			},
			"operational": schema.BoolAttribute{
				Computed:            true,
				Description:         "Indicates whether the managed cluster is operational.",
				MarkdownDescription: "Boolean flag indicating whether the managed cluster is currently operational and ready to handle requests.",
			},
			"status": schema.StringAttribute{
				Computed:            true,
				Description:         "The current status of the managed cluster.",
				MarkdownDescription: "The current operational status of the managed cluster (e.g., OPERATIONAL, NO_CLIENTS).",
			},
			"alert_key": schema.StringAttribute{
				Computed:            true,
				Description:         "Key describing any immediate cluster alerts.",
				MarkdownDescription: "A key that describes any immediate alerts or issues with the managed cluster.",
			},
			"client_ids": schema.ListAttribute{
				ElementType:         types.StringType,
				Computed:            true,
				Description:         "List of client IDs associated with the managed cluster.",
				MarkdownDescription: "A list of client identifiers that are registered with this managed cluster.",
			},
			"service_count": schema.Int32Attribute{
				Computed:            true,
				Description:         "The number of services bound to the managed cluster.",
				MarkdownDescription: "The count of services currently bound to and managed by this cluster.",
			},
			"cc_id": schema.StringAttribute{
				Computed:            true,
				Description:         "The connected cloud ID (legacy field).",
				MarkdownDescription: "Connected cloud identifier. This is a legacy field used only for calling CC APIs and will be removed when migration to CEGS is complete.",
			},
			// Security/Key attributes
			"public_key_certificate": schema.StringAttribute{
				Computed:            true,
				Sensitive:           true,
				Description:         "The public key certificate of the managed cluster.",
				MarkdownDescription: "The X.509 public key certificate used by the managed cluster for secure communications.",
			},
			"public_key_thumbprint": schema.StringAttribute{
				Computed:            true,
				Description:         "The thumbprint of the public key certificate.",
				MarkdownDescription: "The SHA-1 thumbprint of the public key certificate, used for certificate verification.",
			},
			"public_key": schema.StringAttribute{
				Computed:            true,
				Sensitive:           true,
				Description:         "The public key of the managed cluster.",
				MarkdownDescription: "The public key component used by the managed cluster for cryptographic operations.",
			},
			// Timestamp attributes
			"created_at": schema.StringAttribute{
				Computed:            true,
				Description:         "The timestamp when the managed cluster was created.",
				MarkdownDescription: "The date and time when the managed cluster was initially created, in RFC3339 format.",
			},
			"updated_at": schema.StringAttribute{
				Computed:            true,
				Description:         "The timestamp when the managed cluster was last updated.",
				MarkdownDescription: "The date and time when the managed cluster was last modified, in RFC3339 format.",
			},
		},
	}
}
